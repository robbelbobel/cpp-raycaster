+-------------------------------+
|       LVL File Structure      |
+-------------------------------+

LVL is the file structure which contains all the data c-raycaster needs to correctly load the level.
This document aims to explain the structure the file should follow.
A LVL file can be written by hand or generated by a tool such as the "generate-lvl.py" tool found in the tools directory (IN DEVELOPMENT).

Visualized structure of file:
+-----------+ - 0x00
|   Header  |
+-----------+ - 0x09
|   Map     |
|   Data    |
+-----------+
|   Texture |
|   Data    |
+-----------+


- Header:
    The header of the .lvl file should always be 10 bytes long.

    It contains:
        - File Type Specifier (3 Bytes -> 0x00)
        - File Size (3 Bytes -> 0x03)
        - Map Data Address (2 Bytes -> 0x06)
        - Texture Data Address (2 Bytes -> 0x08)
    
    The file type is specified by the string "LVL" coded in ASCII (4C 56 4C).

- Map Data:
    The map data has its own header which specifies the map attributes.
    
    This header follows the following structure:
        - Map Dimensions (2 Bytes)
        - Map Type (1 Byte)
    
    The map data is found after the header (Map Data Address + 3 Bytes).
    Every wall in the map data is represented by its texture ID (1 Byte).
    
    Map Type defines the type of the map with each bit representing the floor or ceiling in the given order.
    Correct entries are defined as follows:
        - 0b01 -> Walls and Ceiling Enabled
        - 0b10 -> Walls and Floor Enabled
        - 0b11 -> Walls, Floor and Ceiling Enabled
        - 0b00 -> Only Walls Enabled
    The walls, floor and ceiling data should be arranged in this order in memory, with the same dimensions as defined in the header.

- Texture Data:
    Texture Data has its own header determining global texture attributes.
    This "global" header contains the following information:
        - Texture Count (1 Byte)

    Every texture in the texture data has its own header which specifies the texture attributes.

    This header follows the following structure:
        - Texture Dimensions (2 Bytes)
        - Texture Frame Count (1 Byte)

    The texture data is found after this header.
    Every pixel of the texture is represented by a 3 byte value (RGB).
    Each texture's ID is determined by the position of the texture in memory (with index 1 as the first index);

    